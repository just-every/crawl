import { BaseModelProvider } from './base_provider.js';
import { costTracker } from '../utils/cost_tracker.js';
export const ELEVENLABS_VOICES = {
    rachel: '21m00Tcm4TlvDq8ikWAM',
    domi: 'AZnzlk1XvdvUeBnXmlld',
    bella: 'EXAVITQu4vr4xnSDxMaL',
    antoni: 'ErXwobaYiN019PkySvjV',
    elli: 'MF3mGyEYCl7XYWbV9V6O',
    josh: 'TxGEqnHWrfWFTfGW9XjX',
    arnold: 'VR6AewLTigWG4xSOukaG',
    adam: 'pNInz6obpgDQGcFmaJgB',
    sam: 'yoZ06aMxZJJ28mfd3POQ',
    george: 'JBFqnCBsd6RMkjVDRZzb',
};
class ElevenLabsProvider extends BaseModelProvider {
    name = 'elevenlabs';
    apiKey;
    baseUrl = 'https://api.elevenlabs.io/v1';
    constructor() {
        super('elevenlabs');
        this.apiKey = process.env.ELEVENLABS_API_KEY || '';
        if (!this.apiKey) {
            console.warn('[ElevenLabs] No API key found in ELEVENLABS_API_KEY environment variable');
        }
    }
    supportsModel(model) {
        return model.startsWith('eleven_') || model.startsWith('elevenlabs-');
    }
    getModelInfo() {
        return undefined;
    }
    async request() {
        throw new Error('ElevenLabs provider only supports voice generation');
    }
    async embed() {
        throw new Error('ElevenLabs provider does not support embeddings');
    }
    async image() {
        throw new Error('ElevenLabs provider does not support image generation');
    }
    async createVoice(text, model, opts) {
        if (!this.apiKey) {
            throw new Error('ElevenLabs API key is required for voice generation');
        }
        try {
            const modelId = model.replace(/^eleven_|^elevenlabs-/, '');
            let voiceId = opts?.voice || 'adam';
            if (voiceId in ELEVENLABS_VOICES) {
                voiceId =
                    ELEVENLABS_VOICES[voiceId];
            }
            const outputFormat = this.mapOutputFormat(opts?.response_format || 'mp3_44100_128');
            console.log(`[ElevenLabs] Generating speech with model ${modelId}, voice: ${voiceId}, format: ${outputFormat}`);
            const requestBody = {
                text,
                model_id: modelId,
                voice_settings: {
                    stability: 0.5,
                    similarity_boost: 0.75,
                    style: 0.0,
                    use_speaker_boost: true,
                    ...(opts?.voice_settings || {}),
                },
            };
            const url = `${this.baseUrl}/text-to-speech/${voiceId}?output_format=${outputFormat}`;
            const response = await fetch(url, {
                method: 'POST',
                headers: {
                    'xi-api-key': this.apiKey,
                    'Content-Type': 'application/json',
                    Accept: opts?.stream
                        ? 'application/octet-stream'
                        : 'audio/mpeg',
                },
                body: JSON.stringify(requestBody),
            });
            if (!response.ok) {
                const error = await response.text();
                throw new Error(`ElevenLabs API error: ${response.status} - ${error}`);
            }
            const characterCount = text.length;
            let costPerThousandChars = 0.3;
            if (modelId.includes('multilingual_v2')) {
                costPerThousandChars = 0.3;
            }
            else if (modelId.includes('turbo')) {
                costPerThousandChars = 0.18;
            }
            const cost = (characterCount / 1000) * costPerThousandChars;
            costTracker.addUsage({
                model,
                metadata: {
                    character_count: characterCount,
                    cost,
                    voice: voiceId,
                    format: outputFormat,
                },
            });
            if (opts?.stream && response.body) {
                return response.body;
            }
            else {
                const buffer = await response.arrayBuffer();
                return buffer;
            }
        }
        catch (error) {
            console.error('[ElevenLabs] Error generating speech:', error);
            throw error;
        }
    }
    mapOutputFormat(format) {
        const formatMap = {
            mp3: 'mp3_44100_128',
            mp3_low: 'mp3_22050_32',
            mp3_high: 'mp3_44100_192',
            pcm: 'pcm_24000',
            pcm_16000: 'pcm_16000',
            pcm_22050: 'pcm_22050',
            pcm_24000: 'pcm_24000',
            pcm_44100: 'pcm_44100',
            ulaw: 'ulaw_8000',
        };
        return formatMap[format] || format;
    }
    async *createResponseStream() {
        yield;
        throw new Error('ElevenLabs provider only supports voice generation');
    }
}
export const elevenLabsProvider = new ElevenLabsProvider();
export { ElevenLabsProvider };
//# sourceMappingURL=elevenlabs.js.map