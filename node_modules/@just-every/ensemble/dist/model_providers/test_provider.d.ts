import { ModelProvider, ResponseInput, ProviderStreamEvent, AgentDefinition } from '../types/types.js';
export interface TestProviderConfig {
    streamingDelay?: number;
    shouldError?: boolean;
    errorMessage?: string;
    simulateRateLimit?: boolean;
    fixedResponse?: string | undefined;
    fixedThinking?: string | undefined;
    simulateToolCall?: boolean;
    toolName?: string;
    toolArguments?: Record<string, any>;
    tokenUsage?: {
        inputTokens: number;
        outputTokens: number;
    };
    chunkSize?: number;
}
export declare const testProviderConfig: TestProviderConfig;
export declare function resetTestProviderConfig(): void;
export declare class TestProvider implements ModelProvider {
    private config;
    constructor(config?: TestProviderConfig);
    createResponseStream(messages: ResponseInput, model: string, agent: AgentDefinition): AsyncGenerator<ProviderStreamEvent>;
    private generateResponse;
    createEmbedding(input: string | string[], model: string, opts?: any): Promise<number[] | number[][]>;
}
export declare const testProvider: TestProvider;
//# sourceMappingURL=test_provider.d.ts.map