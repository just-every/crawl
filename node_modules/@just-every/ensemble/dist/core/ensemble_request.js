import { getModelFromAgent, getModelProvider, } from '../model_providers/model_provider.js';
import { MessageHistory } from '../utils/message_history.js';
import { handleToolCall } from '../utils/tool_execution_manager.js';
import { processToolResult } from '../utils/tool_result_processor.js';
import { verifyOutput } from '../utils/verification.js';
import { waitWhilePaused } from '../utils/pause_controller.js';
import { emitEvent } from '../utils/event_controller.js';
const MAX_ERROR_ATTEMPTS = 5;
export async function* ensembleRequest(messages, agent = {}) {
    const conversationHistory = agent?.historyThread || messages;
    if (agent.instructions) {
        const firstMsg = conversationHistory[0];
        const alreadyHasInstructions = firstMsg &&
            'content' in firstMsg &&
            typeof firstMsg.content === 'string' &&
            firstMsg.content.trim() === agent.instructions.trim();
        if (!alreadyHasInstructions) {
            conversationHistory.unshift({
                type: 'message',
                role: 'system',
                content: agent.instructions,
            });
        }
    }
    const history = new MessageHistory(conversationHistory, {
        compactToolCalls: true,
        preserveSystemMessages: true,
        compactionThreshold: 0.7,
    });
    try {
        let totalToolCalls = 0;
        let toolCallRounds = 0;
        let errorRounds = 0;
        const maxToolCalls = agent?.maxToolCalls ?? 200;
        const maxRounds = agent?.maxToolCallRoundsPerTurn ?? Infinity;
        let hasToolCalls = false;
        let hasError = false;
        let lastMessageContent = '';
        const modelHistory = [];
        do {
            hasToolCalls = false;
            hasError = false;
            const model = await getModelFromAgent(agent, 'reasoning_mini', modelHistory);
            modelHistory.push(model);
            const stream = executeRound(model, agent, history, totalToolCalls, maxToolCalls);
            for await (const event of stream) {
                yield event;
                switch (event.type) {
                    case 'message_complete': {
                        const messageEvent = event;
                        if (messageEvent.content) {
                            lastMessageContent = messageEvent.content;
                        }
                        break;
                    }
                    case 'tool_start': {
                        hasToolCalls = true;
                        ++totalToolCalls;
                        break;
                    }
                    case 'error': {
                        hasError = true;
                        break;
                    }
                }
            }
            if (hasToolCalls) {
                ++toolCallRounds;
                if (agent.modelSettings?.tool_choice) {
                    delete agent.modelSettings.tool_choice;
                }
            }
            if (hasError) {
                ++errorRounds;
            }
        } while ((hasError && errorRounds < MAX_ERROR_ATTEMPTS) ||
            (hasToolCalls &&
                toolCallRounds < maxRounds &&
                totalToolCalls < maxToolCalls));
        if (hasToolCalls && toolCallRounds >= maxRounds) {
            console.log('[ensembleRequest] Tool call rounds limit reached');
        }
        else if (hasToolCalls && totalToolCalls >= maxToolCalls) {
            console.log('[ensembleRequest] Total tool calls limit reached');
        }
        if (agent?.verifier && lastMessageContent) {
            const verificationResult = await performVerification(agent, lastMessageContent, await history.getMessages());
            if (verificationResult) {
                for await (const event of verificationResult) {
                    yield event;
                }
            }
        }
    }
    catch (err) {
        const error = err;
        yield {
            type: 'error',
            error: error.message || 'Unknown error',
            code: error.code,
            details: error.details,
            recoverable: error.recoverable,
            timestamp: new Date().toISOString(),
        };
    }
    finally {
        yield {
            type: 'stream_end',
            timestamp: new Date().toISOString(),
        };
    }
}
async function* executeRound(model, agent, history, currentToolCalls, maxToolCalls) {
    let messages = await history.getMessages(model);
    await emitEvent({
        type: 'agent_start',
        input: 'content' in messages[0] &&
            typeof messages[0].content === 'string'
            ? messages[0].content
            : undefined,
        timestamp: new Date().toISOString(),
    }, agent, model);
    if (agent.onRequest) {
        [agent, messages] = await agent.onRequest(agent, messages);
    }
    await waitWhilePaused(100, agent.abortSignal);
    const provider = getModelProvider(model);
    const stream = provider.createResponseStream(messages, model, agent);
    const toolPromises = [];
    const toolEventBuffer = [];
    agent.onToolEvent = async (event) => {
        toolEventBuffer.push(event);
    };
    for await (const event of stream) {
        yield event;
        await emitEvent(event, agent, model);
        switch (event.type) {
            case 'message_complete': {
                const messageEvent = event;
                if (messageEvent.thinking_content ||
                    (!messageEvent.content && messageEvent.message_id)) {
                    const thinkingMessage = {
                        type: 'thinking',
                        role: 'assistant',
                        content: messageEvent.thinking_content || '',
                        signature: messageEvent.thinking_signature || '',
                        thinking_id: messageEvent.message_id || '',
                        status: 'completed',
                        model,
                    };
                    if (agent.onThinking) {
                        await agent.onThinking(thinkingMessage);
                    }
                    history.add(thinkingMessage);
                    yield {
                        type: 'response_output',
                        message: thinkingMessage,
                    };
                }
                if (messageEvent.content) {
                    const contentMessage = {
                        id: messageEvent.message_id,
                        type: 'message',
                        role: 'assistant',
                        content: messageEvent.content,
                        status: 'completed',
                        model,
                    };
                    if (agent.onResponse) {
                        await agent.onResponse(contentMessage);
                    }
                    history.add(contentMessage);
                    yield {
                        type: 'response_output',
                        message: contentMessage,
                    };
                }
                break;
            }
            case 'tool_start': {
                const toolEvent = event;
                if (!toolEvent.tool_call) {
                    break;
                }
                const remainingCalls = maxToolCalls - currentToolCalls;
                if (remainingCalls <= 0) {
                    console.warn(`Tool call limit reached (${maxToolCalls}). Skipping tool calls.`);
                    break;
                }
                const toolCall = toolEvent.tool_call;
                const functionCall = {
                    type: 'function_call',
                    id: toolCall.id,
                    call_id: toolCall.call_id || toolCall.id,
                    name: toolCall.function.name,
                    arguments: toolCall.function.arguments,
                    model,
                    status: 'completed',
                };
                toolPromises.push(processToolCall(toolCall, agent));
                history.add(functionCall);
                yield {
                    type: 'response_output',
                    message: functionCall,
                };
                break;
            }
            case 'error': {
                console.error('[executeRound] Error event:', event.error);
                break;
            }
        }
    }
    const toolResults = await Promise.all(toolPromises);
    for (const toolResult of toolResults) {
        const toolDoneEvent = {
            type: 'tool_done',
            tool_call: toolResult.toolCall,
            result: {
                call_id: toolResult.call_id || toolResult.id,
                output: toolResult.output,
                error: toolResult.error,
            },
        };
        yield toolDoneEvent;
        await emitEvent(toolDoneEvent, agent, model);
        const functionOutput = {
            type: 'function_call_output',
            id: toolResult.id,
            call_id: toolResult.call_id || toolResult.id,
            name: toolResult.toolCall.function.name,
            output: toolResult.output + (toolResult.error || ''),
            model,
            status: 'completed',
        };
        history.add(functionOutput);
        yield {
            type: 'response_output',
            message: functionOutput,
        };
    }
    await emitEvent({
        type: 'agent_done',
        timestamp: new Date().toISOString(),
    }, agent, model);
    for (const bufferedEvent of toolEventBuffer) {
        yield bufferedEvent;
    }
}
async function* performVerification(agent, output, messages, attempt = 0) {
    if (!agent.verifier)
        return;
    const maxAttempts = agent.maxVerificationAttempts || 2;
    const verification = await verifyOutput(agent.verifier, output, messages);
    if (verification.status === 'pass') {
        yield {
            type: 'message_delta',
            content: '\n\n✓ Output verified',
        };
        return;
    }
    if (attempt < maxAttempts - 1) {
        yield {
            type: 'message_delta',
            content: `\n\n⚠️ Verification failed: ${verification.reason}\n\nRetrying...`,
        };
        const retryMessages = [
            ...messages,
            {
                type: 'message',
                role: 'assistant',
                content: output,
                status: 'completed',
            },
            {
                type: 'message',
                role: 'developer',
                content: `Verification failed: ${verification.reason}\n\nPlease correct your response.`,
            },
        ];
        const retryAgent = {
            ...agent,
            verifier: undefined,
            historyThread: retryMessages,
        };
        const retryStream = ensembleRequest(retryMessages, retryAgent);
        let retryOutput = '';
        for await (const event of retryStream) {
            yield event;
            if (event.type === 'message_complete' && 'content' in event) {
                retryOutput = event.content;
            }
        }
        if (retryOutput) {
            yield* performVerification(agent, retryOutput, messages, attempt + 1);
        }
    }
    else {
        yield {
            type: 'message_delta',
            content: `\n\n❌ Verification failed after ${maxAttempts} attempts: ${verification.reason}`,
        };
    }
}
async function processToolCall(toolCall, agent) {
    if (agent.onToolCall) {
        await agent.onToolCall(toolCall);
    }
    try {
        if (!agent.tools) {
            throw new Error('No tools available for agent');
        }
        const tool = agent.tools.find(t => t.definition.function.name === toolCall.function.name);
        if (!tool || !('function' in tool)) {
            throw new Error(`Tool ${toolCall.function.name} not found`);
        }
        const rawResult = await handleToolCall(toolCall, tool, agent);
        const processedResult = await processToolResult(toolCall, rawResult);
        const toolCallResult = {
            toolCall,
            id: toolCall.id,
            call_id: toolCall.call_id || toolCall.id,
            output: processedResult,
        };
        if (agent.onToolResult) {
            await agent.onToolResult(toolCallResult);
        }
        return toolCallResult;
    }
    catch (error) {
        const errorOutput = error instanceof Error
            ? `Tool execution failed: ${error.message}`
            : `Tool execution failed: ${String(error)}`;
        const toolCallResult = {
            toolCall,
            id: toolCall.id,
            call_id: toolCall.call_id || toolCall.id,
            error: errorOutput,
        };
        if (agent.onToolError) {
            await agent.onToolError(toolCallResult);
        }
        return toolCallResult;
    }
}
export function mergeHistoryThread(mainHistory, thread, startIndex) {
    const newMessages = thread.slice(startIndex);
    mainHistory.push(...newMessages);
}
//# sourceMappingURL=ensemble_request.js.map