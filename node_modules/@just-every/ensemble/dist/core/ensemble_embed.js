import { getModelFromAgent, getModelProvider, } from '../model_providers/model_provider.js';
const EMBEDDING_TTL_MS = 1000 * 60 * 60;
const EMBEDDING_CACHE_MAX = 1000;
const embeddingCache = new Map();
export async function ensembleEmbed(text, agent, options) {
    const cacheKey = `${agent.model || agent.modelClass}:${text}`;
    const cached = embeddingCache.get(cacheKey);
    if (cached) {
        if (Date.now() - cached.timestamp.getTime() < EMBEDDING_TTL_MS) {
            return cached.embedding;
        }
        embeddingCache.delete(cacheKey);
    }
    const model = await getModelFromAgent(agent, 'embedding');
    const provider = getModelProvider(model);
    if (!provider.createEmbedding) {
        throw new Error(`Provider for model ${model} does not support embeddings`);
    }
    const result = await provider.createEmbedding(text, model, options);
    const embedding = Array.isArray(result[0])
        ? result[0]
        : result;
    if (embeddingCache.size >= EMBEDDING_CACHE_MAX) {
        const oldestKey = embeddingCache.keys().next().value;
        if (oldestKey)
            embeddingCache.delete(oldestKey);
    }
    embeddingCache.set(cacheKey, {
        embedding,
        timestamp: new Date(),
    });
    return embedding;
}
//# sourceMappingURL=ensemble_embed.js.map